import dnf
import os
import subprocess
import time

class NeedRestart(dnf.Plugin):
    name = 'needrestart'
    need_check = False
    prom_dir = "{{ node_exporter_textfile_dir | default('/var/lib/node_exporter/') }}"
    metric_prefix = "needrestart"
{% raw %}
    def __init__(self, base, cli):
        super(NeedRestart, self).__init__(base, cli)
        self.base = base
        self.cli = cli

    def resolved(self):
        tx = self.base.transaction
        if tx.install_set or tx.remove_set:
            self.need_check = True

    def _write_metrics(self, outcome=None):
        if not os.path.isdir(self.prom_dir):
            return

        timestamp = int(time.time())
        if not outcome:
            outcome = "failed"

        metrics_file = os.path.join(self.prom_dir, "needrestart.prom")
        with open(metrics_file, "w") as mf:
            try:
                mf.write(f'{self.metric_prefix}_invokation_timestamp{{outcome="{outcome}"}} {timestamp}\n')
            except:
                pass

    def transaction(self):
        if self.base.conf.assumeyes:
            os.environ['DEBIAN_FRONTEND'] = 'noninteractive'

        if self.need_check:
            try:
                subprocess.call(['needrestart'])
                self._write_metrics(outcome="success")
            except OSError:
                self._write_metrics(outcome="error")
{% endraw %}
