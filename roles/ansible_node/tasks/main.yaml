---
- name: "Ensure user exists"
  ansible.builtin.user:
    name: "{{ ansible_node_user }}"
    shell: "/bin/bash"
    system: true
    groups: "{{ ansible_node_user_groups | default(omit) }}"
    create_home: true
  tags: [ansible_node, ansible-node]

- name: "Create .ssh directory for ansible user"
  ansible.builtin.file:
    path: "{{ ansible_node_ssh_dir }}"
    state: "directory"
    owner: "{{ ansible_node_user }}"
    group: "{{ ansible_node_user }}"
    mode: '0700'
  tags: [ansible_node, ansible-node]

- name: "Check ssh keypair age"
  ansible.builtin.stat:
    path: "{{ ansible_node_ssh_key_path }}"
  register: "ansible_node_ssh_key_stat"
  tags: [ansible_node, ansible-node]

- name: "Set fact if ssh keypair is older than max allowed age"
  ansible.builtin.set_fact:
    ansible_node_rotate_ssh_key: "{{ (ansible_date_time.epoch | int) - (ansible_node_ssh_key_stat.stat.mtime | default(0)) > (ansible_node_ssh_max_key_age_months  * 30 * 24 * 3600) }}"
  when: ansible_node_ssh_key_stat.stat.exists is defined and ansible_node_ssh_key_stat.stat.exists
  tags: [ansible_node, ansible-node]

- name: "Conditionally generate SSH key pair for ansible user"
  become_user: "{{ ansible_node_user }}"
  become: true
  community.crypto.openssh_keypair:
    path: "{{ ansible_node_ssh_key_path }}"
    type: "rsa"
    size: 4096
    force: "{{ ansible_node_rotate_ssh_key | default(true) }}"
    mode: '0600'
  tags: [ansible_node, ansible-node]

- name: "Read the generated public key"
  ansible.builtin.slurp:
    src: "{{ ansible_node_ssh_key_path }}.pub"
  register: ansible_node_pubkey_read
  tags: [ansible_node, ansible-node]

- name: "Set host public key fact"
  ansible.builtin.set_fact:
    ansible_node_pubkey: "{{ ansible_node_pubkey_read.content | b64decode }}"
  tags: [ansible_node, ansible-node]

- name: "Collect other hosts' public keys and IPs"
  ansible.builtin.set_fact:
    ansible_node_pubkeys: >-
      {{
        (ansible_node_pubkeys | default([])) + [ {
          'pub_key': hostvars[item].ansible_node_pubkey,
          'addresses': (
            [hostvars[item].ansible_default_ipv4.address] +
            ([hostvars[item].safe_ip_address] if 'safe_ip_address' in hostvars[item] else [])
          ) | unique
        } ]
      }}
  loop: "{{ groups[ansible_node_inventory_group] }}"
  loop_control:
    loop_var: item
  tags: [ansible_node, ansible-node]

- name: "Install other hosts' public keys"
  ansible.posix.authorized_key:
    user: "{{ ansible_node_user }}"
    key: "{{ item.pub_key }}"
    state: present
    key_options: no-port-forwarding,from="{{ item.addresses | join(',') if ansible_default_ipv4.address not in item.addresses else (['127.0.0.1', '::1'] + item.addresses) | join(',') }}"
  loop: "{{ ansible_node_pubkeys }}"
  tags: [ansible_node, ansible-node]

- name: "Create known_hosts file if not existent"
  ansible.builtin.file:
    path: "/home/{{ ansible_node_user }}/.ssh/known_hosts"
    state: "touch"
    owner: "{{ ansible_node_user }}"
    group: "{{ ansible_node_user }}"
    mode: "0640"
    modification_time: "preserve"
    access_time: "preserve"
  tags: [ansible_node, ansible-node]

- name: "Remove existing cert-authority entries in known_hosts"
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_node_user }}/.ssh/known_hosts"
    regexp: "^@cert-authority"
    state: "absent"
  tags: [ansible_node, ansible-node]

- name: "Add cert authorities"
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_node_user }}/.ssh/known_hosts"
    line: "@cert-authority {{ item.domain }} {{ item.cert }}"
    regexp: "^@cert-authority {{ item.domain }}"
    insertbefore: "BOF"
  with_items: "{{ ssh_ca_certs | default([]) }}"
  tags: [ansible_node, ansible-node]

- name: "Assemble inventory content"
  ansible.builtin.set_fact:
    ansible_node_inventory_lines: |
      [{{ ansible_node_inventory_group }}]
      {% for host in groups[ansible_node_inventory_group] %}
      {{ hostvars[host].inventory_hostname }}
      {% endfor %}
  tags: [ansible_node, ansible-node]

- name: "Write inventory file to disk"
  ansible.builtin.copy:
    dest: "{{ ansible_node_inventory_path }}"
    content: "{{ ansible_node_inventory_lines }}"
    mode: '0644'
  tags: [ansible_node, ansible-node]

- name: "Install ansible"
  ansible.builtin.package:
    name: ansible
  tags: [ansible_node, ansible-node]
