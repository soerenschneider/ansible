---
- name: "Set variables"
  ansible.builtin.set_fact:
    dufs_local_binary: ""
    dufs_installed_version: ""
    dufs_desired_version: "{{ dufs_version | default('') }}"
    dufs_download_archive: ""
    dufs_download_signature: ""
    dufs_stopped_service: ""
    dufs_github_release: ""
    dufs_go_os: ""
    dufs_go_arch: ""
    dufs_checksum_signature_file: ""
    dufs_checksum_file: ""
    dufs_full_filename: ""
    dufs_release_checksum: ""
  tags: [dufs, dufs-install, deps]

- name: Check for existing binary
  ansible.builtin.stat:
    path: /usr/local/bin/{{ binary_name }}
  register: dufs_local_binary
  tags: [dufs, dufs-install, deps]

- name: Check installed version
  when: dufs_local_binary.stat.exists
  tags: [dufs, dufs-install, deps]
  block:
    - name: Check installed version
      ansible.builtin.shell:
        cmd: "set -o pipefail &&  /usr/local/bin/{{ binary_name }} --version 2>&1 | awk '{print $2}'"
        executable: /bin/bash
      register: dufs_installed_version
      changed_when: false

    - name: Register local version
      ansible.builtin.set_fact:
        dufs_installed_version: "v{{ dufs_installed_version.stdout }}"
      changed_when: false

    - name: Print debug information
      ansible.builtin.debug:
        msg: "Installed version: {{ dufs_installed_version }}"
      changed_when: false

- name: Fetch latest release information from github
  when: dufs_desired_version is not defined or not dufs_desired_version
  tags: [dufs, dufs-install, deps]
  block:
    - name: Print debug information
      ansible.builtin.uri:
        url: https://api.github.com/repos/{{ github_repo }}/releases/latest
        return_content: true
      register: dufs_github_release
      retries: 3
      delay: 5
      until: dufs_github_release is not failed

    - name: Set github release
      ansible.builtin.set_fact:
        dufs_desired_version: "{{ dufs_github_release.json.tag_name }}"
      changed_when: false

    - name: Print latest GitHub version
      ansible.builtin.debug:
        msg: "Latest GitHub version: {{ dufs_desired_version }}"
      changed_when: false

- name: "Download artifacts"
  when: not dufs_local_binary.stat.exists or dufs_desired_version != dufs_installed_version
  tags: [dufs, dufs-install, deps]
  block:
    - name: Generate temp dir
      become: false
      ansible.builtin.tempfile:
        state: directory
        suffix: "{{ binary_name }}"
      register: dufs_download_dir

    - name: Set vars for generating download link
      ansible.builtin.set_fact:
        dufs_go_os: "{% if ansible_system | lower == 'linux' %}unknown-linux-musl{% else %}ansible_system | lower{% endif %}"
        dufs_go_arch: "{{ 'x86_64' if ansible_architecture == 'x86_64' else 'arm' if ansible_architecture == 'armv6l' else 'armv7' if ansible_architecture == 'armv7l' else 'aarch64' if ansible_architecture == 'aarch64' }}"
      changed_when: false

    - name: Set filenames
      ansible.builtin.set_fact:
        dufs_full_filename: "{{ binary_name }}-{{ dufs_desired_version }}-{{ dufs_go_arch }}-{{ dufs_go_os }}.tar.gz"
        dufs_download_dir: "{{ dufs_download_dir.path }}"
      changed_when: false

    - name: Download archive
      become: false
      ansible.builtin.get_url:
        url: "https://github.com/{{ github_repo }}/releases/download/{{ dufs_desired_version }}/{{ dufs_full_filename }}"
        dest: "{{ dufs_download_dir }}/{{ dufs_full_filename }}"
        mode: "0640"
      register: dufs_download_archive
      until: dufs_download_archive is succeeded
      retries: 1
      delay: 2

    - name: Unpack binaries from archive
      become: false
      ansible.builtin.unarchive:
        src: "{{ dufs_download_dir }}/{{ dufs_full_filename }}"
        dest: "{{ dufs_download_dir }}"
        remote_src: true
      check_mode: false

    - name: Stop service
      ansible.builtin.service:
        name: "{{ service_name }}"
        state: stopped
      failed_when: false
      register: dufs_stopped_service

    - name: Copy binaries
      ansible.builtin.copy:
        src: "{{ dufs_download_dir }}/dufs"
        dest: /usr/local/bin/dufs
        remote_src: true
        mode: "0755"
        owner: root
        group: root
      notify: [Restart dufs]

  always:
    - name: Delete downloaded files
      ansible.builtin.file:
        state: absent
        path: "{{ item }}"
      with_items: ["{{ dufs_download_dir }}"]
      failed_when: false

    - name: Restart service
      ansible.builtin.service:
        name: "{{ service_name }}"
        state: restarted
      when: dufs_stopped_service is defined and dufs_stopped_service is changed
