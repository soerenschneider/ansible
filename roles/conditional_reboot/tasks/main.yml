---
- name: Including tasks
  ansible.builtin.include_tasks: autoreboot.yaml
  tags: [conditional-reboot, conditional-reboot-install]

- name: Create user for conditional-reboot
  ansible.builtin.user:
    name: "{{ conditional_reboot_user }}"
    state: present
    groups: "{{ conditional_reboot_user_additional_groups | default(omit) }}"
    system: true
  tags: [conditional-reboot, conditional-reboot-install]

- name: Add user to node_exporter group
  ansible.builtin.user:
    name: "{{ conditional_reboot_user }}"
    groups: "{{ node_exporter_group | default('node_exporter') }}"
    append: true
  failed_when: false
  tags: [conditional-reboot, conditional-reboot-install]

- name: Remove old sudoers entries
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    line: "{{ item }}"
    validate: visudo -cf %s
    state: absent
  with_items: ["{{ conditional_reboot_user }} ALL=(ALL) NOPASSWD: /bin/systemctl reboot", "{{ conditional_reboot_user }} ALL=(ALL) NOPASSWD: /sbin/reboot"]
  tags: [conditional-reboot, conditional-reboot-install, todo]

- name: Figure out full path of needrestart
  ansible.builtin.command: which needrestart
  register: _needrestart_path_result
  ignore_errors: true
  changed_when: false
  tags: [conditional-reboot, conditional-reboot-install]

- name: Save needrestart binary path to a variable
  ansible.builtin.set_fact:
    _needrestart_path: "{{ _needrestart_path_result.stdout }}"
  when: _needrestart_path_result.rc == 0
  tags: [conditional-reboot, conditional-reboot-install]

- name: Add user to sudoers to invoke reboot
  ansible.builtin.lineinfile:
    dest: /etc/sudoers
    line: "{{ item }}"
    validate: visudo -cf %s
    state: present
  with_items: ["{{ conditional_reboot_user }} ALL=(ALL) NOPASSWD: /bin/systemctl reboot, /sbin/reboot{% if _needrestart_path_result.rc == 0 %}, {{ _needrestart_path }}{% endif %}"]
  tags: [conditional-reboot, conditional-reboot-install]

- name: Create journal file
  ansible.builtin.file:
    path: "{{ conditional_reboot_journal_file }}"
    owner: "{{ conditional_reboot_user }}"
    state: touch
    group: root
    mode: "0644"
  tags: [conditional-reboot, conditional-reboot-install]

- name: Including tasks
  ansible.builtin.include_tasks: install-github.yml
  vars:
    binary_name: conditional-reboot
    github_repo: soerenschneider/conditional-reboot
    service_name: conditional-reboot
  tags: [conditional-reboot, conditional-reboot-install, deps]

- name: Add config
  ansible.builtin.copy:
    content: "{{ conditional_reboot_config | to_nice_json }}"
    dest: "{{ conditional_reboot_config_file }}"
    owner: "{{ conditional_reboot_user }}"
    group: root
    mode: "0640"
  notify: Restart conditional-reboot
  tags: [conditional-reboot, conditional-reboot-configure]

- name: Add systemd units
  ansible.builtin.template:
    src: "{{ item }}.j2"
    dest: /etc/systemd/system/{{ item }}
    owner: root
    group: root
    mode: "0644"
  notify: Restart conditional-reboot
  with_items: [conditional-reboot.service]
  tags: [conditional-reboot, conditional-reboot-configure]

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  tags: [conditional-reboot, conditional-reboot-configure]

- name: Enable/disable conditional_reboot
  ansible.builtin.systemd:
    name: "{{ item }}"
    enabled: true
    state: started
  with_items: [conditional-reboot.service]
  tags: [conditional-reboot, conditional-reboot-configure]

- name: Make sure timer is started
  ansible.builtin.systemd:
    name: "{{ item }}"
    state: started
  with_items: []
  #    - conditional-reboot.timer
  tags: [conditional-reboot, conditional-reboot-configure]
