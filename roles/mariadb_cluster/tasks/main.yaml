---
- name: Install mariadb
  ansible.builtin.include_tasks: install.yaml
  tags: always

- name: Configure mariadb
  ansible.builtin.include_tasks: configure.yaml
  tags: always

- name: Check certificates
  ansible.builtin.include_tasks: check_certs.yaml
  tags: always

- name: Check connectivity
  ansible.builtin.include_tasks: check_connectivity.yaml
  tags: always

# this task is mainly used to exit the playbook early if all healthchecks pass
# therefore, only run it if there are no pending changes to the containers
- name: Check containers
  ansible.builtin.include_tasks: check_containers.yaml
  when: not mariadb_cluster_install_changed | default(false) and not mariadb_cluster_config_changed | default(false)
  tags: always

- name: Get UID for generated user
  ansible.builtin.getent:
    database: passwd
    key: "{{ mariadb_cluster_user }}"
  tags: [mariadb, mariadb-recover]

- name: Build user string
  ansible.builtin.set_fact:
    _mariadb_cluster_user_string: "{{ getent_passwd[mariadb_cluster_user][1] }}"
  tags: [mariadb, mariadb-recover]

- name: Create mariadb docker network
  community.docker.docker_network:
    name: "{{ mariadb_cluster_docker_network }}"
  tags: [mariadb, mariadb-recover]

- name: Stop mariadb container as config has been updated
  community.docker.docker_container:
    name: "{{ mariadb_cluster_container_name }}"
    state: stopped
  when: mariadb_cluster_set_config is defined and mariadb_cluster_set_config is changed and groups[mariadb_cluster_ansible_group] | length == mariadb_cluster_mariadb_cluster_running_and_stabilized_instances | default([]) | length
  tags: [mariadb, mariadb-recover]

- name: Check if it's safe to bootstrap existing cluster
  tags: [mariadb, mariadb-recover]
  block:
    - name: "Check if 'grastate.dat' file exists"
      ansible.builtin.stat:
        path: "{{ mariadb_cluster_storage_dir }}/grastate.dat"
      register: mariadb_cluster_grastate_stat

    - name: "Set variable based on existence of grastate.dat"
      ansible.builtin.set_fact:
        mariadb_cluster_grastate_exists: "{{ mariadb_cluster_grastate_stat.stat.exists }}"

    - name: Examine grastate.dat file
      when: mariadb_cluster_grastate_exists
      block:
        - name: "Check if 'safe_to_bootstrap: 1' is in grastate.dat"
          ansible.builtin.shell: |
            grep -Fxq "safe_to_bootstrap: 1" {{ mariadb_cluster_storage_dir }}/grastate.dat
          register: mariadb_cluster_bootstrap_check
          changed_when: false
          ignore_errors: true

        - name: Set per-host fact if safe to bootstrap
          ansible.builtin.set_fact:
            mariadb_cluster_is_safe_to_bootstrap: "{{ mariadb_cluster_bootstrap_check.rc == 0 }}"

        - name: Gather safe_to_bootstrap info from all nodes
          ansible.builtin.set_fact:
            mariadb_cluster_bootstrap_candidates: "{{ groups[mariadb_cluster_ansible_group] | map('extract', hostvars) | list | json_query('[?mariadb_cluster_is_safe_to_bootstrap].inventory_hostname') }}"
          run_once: true

        - name: "Set mariadb_cluster_bootstrap_candidates"
          ansible.builtin.debug:
            var: mariadb_cluster_bootstrap_candidates

        - name: "Set mariadb_cluster_host_with_highest_number"
          ansible.builtin.set_fact:
            mariadb_cluster_host_with_highest_number: "{{ mariadb_cluster_bootstrap_candidates[0] }}"
          run_once: true
          when: mariadb_cluster_bootstrap_candidates | length > 0

        - name: "Print mariadb_cluster_host_with_highest_number"
          ansible.builtin.debug:
            var: mariadb_cluster_host_with_highest_number

- name: Run wsrep-recover
  when:
    - mariadb_cluster_bootstrap_candidates | default([]) | length == 0
    - mariadb_cluster_grastate_exists
  tags: [mariadb, mariadb-recover]
  block:
    - name: Figure out most recent commit
      community.docker.docker_container:
        name: "{{ mariadb_cluster_container_name }}"
        image: "{{ mariadb_cluster_image }}"
        restart_policy: "no"
        user: "{{ _mariadb_cluster_user_string }}"
        networks:
          - name: "{{ mariadb_cluster_docker_network }}"
        command: |
          --wsrep-recover
          --wsrep-cluster-address={{ mariadb_cluster_galera_cluster_address }}
        env:
          MARIADB_ALLOW_EMPTY_ROOT_PASSWORD: "yes"
          TZ: UTC
        volumes:
          - "{{ mariadb_cluster_certs_dir }}:/certs:ro"
          - "{{ mariadb_cluster_storage_dir }}:/var/lib/mysql:Z"
          - "{{ mariadb_cluster_base_dir }}/my.cnf:/etc/mysql/conf.d/galera.cnf:ro"

    - name: Pause to Allow Container to Generate Logs
      ansible.builtin.pause:
        seconds: 5

    - name: Fetch logs
      ansible.builtin.command: "docker logs --since=1m {{ mariadb_cluster_container_name }}"
      changed_when: false
      register: mariadb_cluster_container_logs

    - name: Find correct logline
      ansible.builtin.set_fact:
        mariadb_cluster_relevant_log_line: "{{ mariadb_cluster_container_logs.stderr_lines | select('search', 'Recovered position') | last }}"

    - name: Extract recovered position
      ansible.builtin.set_fact:
        mariadb_cluster_extracted_number: "{{ mariadb_cluster_relevant_log_line.split(':')[-1] }}"

    - name: Extracted position
      ansible.builtin.debug:
        var: mariadb_cluster_extracted_number

    - name: "Map and set data for extracted position"
      ansible.builtin.set_fact:
        mariadb_cluster_extracted_wsrep_data: "{{ groups[mariadb_cluster_ansible_group] | map('extract', hostvars) | list | json_query('[].{host: inventory_hostname, pos: mariadb_cluster_extracted_number }') }}"

    - name: "Sort data"
      ansible.builtin.command: "python3 -c 'import sys, json; data = json.load(sys.stdin); sorted_data = sorted(data, key=lambda x: int(x[\"pos\"]), reverse=True); print(sorted_data[0][\"host\"])'"
      args:
        stdin: "{{ mariadb_cluster_extracted_wsrep_data | to_json }}"
      changed_when: false
      register: mariadb_cluster_highest

    - name: Find Highest Extracted Number and Corresponding Host
      ansible.builtin.set_fact:
        mariadb_cluster_host_with_highest_number: "{{ mariadb_cluster_highest.stdout }}"
      run_once: true

    - name: Display Highest Extracted Number and Host
      ansible.builtin.debug:
        var: mariadb_cluster_host_with_highest_number
      run_once: true

    - name: Set bootstrap variable
      ansible.builtin.lineinfile:
        path: "{{ mariadb_cluster_storage_dir }}/grastate.dat"
        regexp: "^safe_to_bootstrap:"
        line: "safe_to_bootstrap: 1"
      when: inventory_hostname == mariadb_cluster_host_with_highest_number
  rescue:
    - name: No prior container exists
      ansible.builtin.set_fact:
        mariadb_cluster_host_with_highest_number: "{{ groups[mariadb_cluster_ansible_group][0] }}"
      tags: [mariadb, mariadb-recover]

- name: Run master with startdb sql
  ansible.builtin.include_tasks: tasks/run_master.yaml
  when: inventory_hostname == mariadb_cluster_host_with_highest_number | default(groups[mariadb_cluster_ansible_group][0])
  tags: [mariadb, mariadb-recover]

- name: Run slaves
  ansible.builtin.include_tasks: tasks/run_slaves.yaml
  when: inventory_hostname != mariadb_cluster_host_with_highest_number | default(groups[mariadb_cluster_ansible_group][0])
  tags: [mariadb, mariadb-recover]

- name: Run initial master as slave
  ansible.builtin.include_tasks: tasks/run_slaves.yaml
  when: inventory_hostname == mariadb_cluster_host_with_highest_number | default(groups[mariadb_cluster_ansible_group][0])
  tags: [mariadb, mariadb-recover]

- name: Run mysqld exporter
  community.docker.docker_container:
    name: "mysqld-exporter"
    image: "{{ mariadb_cluster_mysqld_exporter_image }}"
    user: "{{ _mariadb_cluster_user_string }}"
    restart_policy: "always"
    networks:
      - name: "{{ mariadb_cluster_docker_network }}"
    env:
      MYSQLD_EXPORTER_PASSWORD: "{{ mariadb_cluster_mysqld_exporter_password }}"
    command: |
      --mysqld.address={{ mariadb_cluster_container_name }}:3306
      --mysqld.username=exporter
      --tls.insecure-skip-verify
      --log.level=debug
    ports:
      - "127.0.0.1:9104:9104"
  tags: [mariadb, exporter, mysql]
