#!/usr/bin/env bash

set -ue

INTERFACE="{{ ssh_update_listener_wg_interface | default('wg0') }}"
SSHD_CONFIG="/etc/ssh/sshd_config"
WG_DOWN_IPS_TO_LISTEN=({{ ssh_update_listener_wg_down_ips | join(" ") }})
WG_UP_IPS_TO_LISTEN=({{ ssh_update_listener_wg_up_ips | join(" ") }})
PROMETHEUS_TEXTFILE_DIR="{{ prometheus_text_dir | default('/var/lib/node_exporter') }}"
METRIC_FILE="$PROMETHEUS_TEXTFILE_DIR/ssh_update_listener.prom"

MD5=$(md5sum "${SSHD_CONFIG}")
WG_TUNNEL_UP_BOOL="0"

function sshd_set_listen_address() {
    local ips=("${@}")

    local perform_update="false"

    # check if updates are necessary
    # first check: check how many lines should be existent in the config
    {% raw -%}
    local occurrences_expected=${#ips[@]}
    {% endraw -%}
    local occurrences_found=$(grep -o "ListenAddress" ${SSHD_CONFIG} | wc -l)
    if [[ ${occurrences_expected} != ${occurrences_found} ]]; then
	      echo "Found imbalance"
        perform_update="true"
    fi

    # second check: check if a line with every wanted ip is existent
    for ip in "${ips[@]}"; do
        if ! grep -q "^ListenAddress ${ip}$" "${SSHD_CONFIG}"; then
            perform_update="true"
        fi
    done

    # apparently we need to perform an update
    if [[ "${perform_update}" = "true" ]]; then
        echo "Fixing"
        # if there's no option ListenAddress set yet, append it to the file
        if ! grep -q "ListenAddress" "${SSHD_CONFIG}"; then
          echo "ListenAddress $ip" >> ${SSHD_CONFIG}
        fi

        echo "Determining line of ListenAddress"
        line=$(grep -n "ListenAddress" "${SSHD_CONFIG}" | head -n1 | cut -d: -f1)
        
        # remove all occurences of ListenAddress
        sed -i '/ListenAddress/d' "${SSHD_CONFIG}"

        # loop over the addresses we want to set and set them
        for ip in "${ips[@]}"; do
          sed -i "${line}i ListenAddress ${ip}" $SSHD_CONFIG
        done
    fi
}

function get_metrics() {
  local UPDATE_METRIC_NAME="ssh_update_listener_timestamp_seconds"
  echo "# HELP $UPDATE_METRIC_NAME the timestamp of the invocation"
  echo "# TYPE $UPDATE_METRIC_NAME gauge"
  echo "$UPDATE_METRIC_NAME $(date +%s)"

  local WG_TUNNEL_ACTIVE="ssh_update_listener_wg_active_bool"
  echo "# HELP $WG_TUNNEL_ACTIVE boolean that indicates whether the tunnel is up"
  echo "# TYPE $WG_TUNNEL_ACTIVE gauge"
  echo "$WG_TUNNEL_ACTIVE ${WG_TUNNEL_UP_BOOL}"
}

if wg show "$INTERFACE" &>/dev/null; then
  WG_TUNNEL_UP_BOOL="1"
  sshd_set_listen_address "${WG_UP_IPS_TO_LISTEN[@]}"
else
  sshd_set_listen_address "${WG_DOWN_IPS_TO_LISTEN[@]}"
fi

MD5_AFTER=$(md5sum "${SSHD_CONFIG}")
if [[ "${MD5}" != "${MD5_AFTER}" ]]; then
  echo "Detected update, restarting {{ _sshd_systemd_unit_name | default('sshd') }}"
  systemctl restart {{ _sshd_systemd_unit_name | default('sshd') }}
fi

if [ -d ${PROMETHEUS_TEXTFILE_DIR} ]; then
  get_metrics > ${METRIC_FILE}.tmp
  mv ${METRIC_FILE}.tmp ${METRIC_FILE}
fi
