#!/usr/bin/env bash

set -e

VAULT_HOST="{{ vault_addr }}"
MOUNT="ssh/clients"
DEST="{{ ssh_user_ca_key_file }}"
TMP_FILE="${DEST}.tmp"
NODE_EXPORTER_DIR="{{Â node_exporter_textfile_dir }}"

cleanup() {
    rm -f "${TMP_FILE}" || true

    if [[ -f "${DEST}" && -n "${NODE_EXPORTER_DIR}" && -d "${NODE_EXPORTER_DIR}" ]]; then
        METRIC="ssh_user_ca_checksum{file=\"${DEST}\"} $(cksum ${DEST} | cut -d' ' -f1)"
        echo ${METRIC} > "${NODE_EXPORTER_DIR}/fetch_ssh_user_ca.prom.tmp"
        
        METRIC="ssh_user_ca_timestamp_seconds{file=\"${DEST}\"} $(date +%s)"
        echo ${METRIC} >> "${NODE_EXPORTER_DIR}/fetch_ssh_user_ca.prom.tmp"
        mv "${NODE_EXPORTER_DIR}/fetch_ssh_user_ca.prom.tmp" "${NODE_EXPORTER_DIR}/fetch_ssh_user_ca.prom"
    fi
}

trap cleanup EXIT

fetch() {
    if [[ -f "${DEST}" ]]; then
        CHECKSUM="$(md5sum ${DEST} | awk '{print $1}')"
        echo "CA file exists at ${DEST} with checksum ${CHECKSUM}"
    fi

    curl -s -o "${TMP_FILE}" \
        --connect-timeout 5 \
        --max-time 10 \
        --retry 5 \
        --retry-delay 5 \
        --retry-max-time 40 \
        "${VAULT_HOST}/v1/${MOUNT}/public_key"

    CHECKSUM_NEW="$(md5sum ${TMP_FILE} | awk '{print $1}')"

    if [[ ! -f "${DEST}" || "${CHECKSUM}" != "${CHECKSUM_NEW}" ]]; then
        echo "Installing new cert with fingerprint ${CHECKSUM_NEW}"
        mv ${TMP_FILE} ${DEST}
        systemctl restart sshd
    else
        echo "Not installing ca, no updates"
    fi
}

fetch
