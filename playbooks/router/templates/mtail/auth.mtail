counter mtail_auth_ssh_invalid_user
counter mtail_auth_ssh_failed_login by method,user
counter mtail_auth_ssh_login by method,user
counter mtail_auth_su_failed by user
counter mtail_auth_ssh_2fa_invalid_token by user
counter mtail_auth_sudo_user_not_in_sudoers by user
counter mtail_auth_sudo_auth_failure by user
counter mtail_auth_sudo_successful by user
counter mtail_auth_doas_cmd by user
counter mtail_auth_doas_cmd_denied by user

def syslog {
  /^(?P<date>(?P<legacy_date>\w+\s+\d+\s+\d+:\d+:\d+)|(?P<rfc3339_date>\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}.\d+[+-]\d{2}:\d{2}))/ +
  /\s+(?:\w+@)?(?P<hostname>[\w\.-]+)\s+(?P<application>\S+)(?:\[(?P<pid>\d+)\])?:\s+(?P<message>.*)/ {
    # If the legacy_date regexp matched, try this format.
    len($legacy_date) > 0 {
      strptime($2, "Jan _2 15:04:05")
    }
    # If the RFC3339 style matched, parse it this way.
    len($rfc3339_date) > 0 {
      strptime($rfc3339_date, "2006-01-02T03:04:05-0700")
    }
    # Call into the decorated block
    next
  }
}


getfilename() =~ /secure|auth.log|authlog/ {
    @syslog {
        /Invalid user (?P<user>\S+) from .* port \d+$/ {
            mtail_auth_ssh_invalid_user++
        }
        
        /Connection closed by authenticating user (?P<user>\S+).*\[preauth\]$/ {
            mtail_auth_ssh_failed_login["publickey"][$user]++
        }

        /Failed password for (?P<user>\S+) .*$/ {
            mtail_auth_ssh_failed_login["password"][$user]++
        }

        /pam_unix\(sshd\:auth\)\:\s+authentication failure.*rhost=.*user=(?P<user>\S+)$/ {
            mtail_auth_ssh_failed_login["password"][$user]++
        }

        /Accepted (?P<method>\S+) for (?P<user>\S+) from .*$/ {
            mtail_auth_ssh_login[$method][$user]++
        }

        /BAD SU (?P<user>\S+) to \S+$/ {
            mtail_auth_su_failed[$user]++
        }

        /Invalid verification code for (?P<user>\S+)/ {
            mtail_auth_ssh_2fa_invalid_token[$user]++
        }

        /\s*(?P<user>\S+)\s*\: user NOT in sudoers.*/ {
            mtail_auth_sudo_user_not_in_sudoers[$user]++
        }

        /pam_unix\(sudo\:auth\)\: authentication failure;.*user=(?P<user>\S+)$/ {
            mtail_auth_sudo_auth_failure[$user]++
        }

        /\s*(?P<user>\S+)\s*\:\s*TTY=\S+\s*;\s*PWD=\S+\s*;\s*USER=\S+\s*;\s*COMMAND=\S+$/ {
            mtail_auth_sudo_successful[$user]++
        }

        /doas: (?P<user>\S+) ran command .* as \S+ from/ {
            mtail_auth_doas_cmd[$user]++
        }

        /doas: failed command for (?P<user>\S+):/ {
            mtail_auth_doas_cmd_denied[$user]++
        }
    }
}
