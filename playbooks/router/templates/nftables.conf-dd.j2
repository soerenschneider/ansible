#!/usr/sbin/nft -f

flush ruleset

include "{{ nftables_variables_file }}"

define WG_ROADWARRIORS = { 192.168.200.100, 192.168.200.101, 192.168.200.102 }
define WG_CLIENTS = { 192.168.65.0/24, $LOCAL_KODI, $LOCAL_DEVICE_SOEREN_WORK }
define NET_LOCAL = 192.168.64.0/21

table ip global {
    chain inbound_world {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        # However, it also lets probes discover this host is alive.
        # This sample accepts them within a certain rate limit:
        #
        # icmp type echo-request limit rate 5/second accept

        # allow wireguard
        udp dport $WIREGUARD_PORT accept

        # allow SSH connections from some well-known internet host
        ip saddr $WORLD_SSH_SOURCES tcp dport 42222 accept
    }

    chain inbound_private {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # allow DHCP, DNS and SSH from the private network
        ip saddr $NET_PRIVATE ip protocol . th dport vmap {
            tcp . 22 : accept,
            udp . 53 : accept,
            tcp . 53 : accept,
            udp . 67 : accept,
            udp . 123 : accept
        }

        # todo: add variable for devices to tighten this rule
        ip saddr { 192.168.67.0/24, 192.168.64.0/24 } tcp dport { 80, 445, 6600 } accept
        ip saddr { 192.168.64.0/24, $LOCAL_PROMETHEUS_SERVER } tcp dport { 8405, 9100, 9192 } accept
        ip saddr $NET_PRIVATE tcp dport 42222 accept
    }

    chain inbound_wg {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # allow DHCP, DNS and SSH from the private network
        ip protocol . th dport vmap {
        tcp . 42222 : accept,
        udp . 53    : accept,
        tcp . 53    : accept,
        udp . 67    : accept,
        udp . 123   : accept
    }
    }

    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname vmap {
        lo : accept,
            $DEV_WORLD : jump inbound_world,
            $WG_IF : jump inbound_wg,
            $DEV_PRIVATE : jump inbound_private,
            "vlan64": jump inbound_private,
            "vlan65": jump inbound_private,
            "vlan66": jump inbound_private,
            "vlan67": jump inbound_private,
            "vlan68": jump inbound_private
        }

        # the rest is dropped by the above policy
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        iifname "vlan64" accept
        iifname "vlan65" oifname { "vlan65", "vlan66", "vlan67" } accept
        iifname "vlan65" ip saddr $LOCAL_K8S_WORKER oifname { "wg0" } ip daddr 192.168.200.5 tcp dport 9091 accept
        iifname "vlan66" ip saddr { $LOCAL_SENSORS, $LOCAL_TASMOTA, $LOCAL_K8S_WORKER } oifname { "vlan65" } ip daddr 192.168.65.0/24 tcp dport { 1883, 8883 } accept
        iifname "vlan66" ip saddr { $LOCAL_SENSORS } oifname { "vlan65", "wg0" } ip daddr { $LOCAL_VAULT_SERVER, $GLOBAL_VAULT_SERVER } tcp dport 443 accept
        iifname "vlan66" ip saddr { $LOCAL_SENSORS } oifname { "vlan65", "wg0" } ip daddr { 192.168.2.3, 192.168.73.1} tcp dport 53 accept
        iifname "vlan67" oifname { "vlan65", "vlan66" } accept
        iifname "vlan67" ip saddr 192.168.67.15 oifname "vlan64" ip daddr 192.168.64.5 tcp dport { 27036, 27037 } accept
        iifname "vlan67" ip saddr 192.168.67.15 oifname "vlan64" ip daddr 192.168.64.5 udp dport { 27031, 27036 } accept
        # TODO: this is horrible, add vars
        iifname "vlan68" ip saddr $LOCAL_DEVICE_SOEREN_WORK oifname { "wg0", "vlan65" } ip daddr { 192.168.200.1, 192.168.200.5, 192.168.2.229, 192.168.65.12, 192.168.2.253, 192.168.65.32, 192.168.73.250, 192.168.65.250, $LOCAL_VAULT_SERVER, $GLOBAL_VAULT_SERVER } accept
        iifname "vlan68" ip saddr $LOCAL_DEVICE_SOEREN_WORK oifname { "wg0", "vlan65", "vlan67" } ip daddr { 192.168.200.1, 192.168.200.5, 192.168.0.0/16, 192.168.67.0/24, 192.168.2.0/24, 192.168.65.0/24, 192.168.73.0/24 } tcp dport 22 accept
        iifname "vlan68" ip saddr $LOCAL_DEVICE_SOEREN_WORK oifname { "wg0", "vlan65" } ip daddr { 192.168.65.0/24, 192.168.2.0/24, 192.168.73.0/24 } tcp dport 6443 accept
        iifname "wg0"    ip saddr $WG_ROADWARRIORS          oifname { "vlan65", "vlan67", "vlan68" } accept

        # connections from the internal net to the internet or to other
        # internal nets are allowed
        # route
        iifname { "vlan64", "vlan65", "vlan66", "vlan67", "vlan68" } ip daddr != 192.168.0.0/16 accept
        ip saddr $WG_CLIENTS iifname { "vlan65", "vlan67" } accept
        ip saddr $WG_NET iifname $WG_IF accept
        #iifname wg0 ip daddr 192.168.2.0/24 accept

        # the rest is dropped by the above policy
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # masquerade private IP addresses
        ip saddr $NET_LOCAL oifname $DEV_WORLD masquerade
    }
}
