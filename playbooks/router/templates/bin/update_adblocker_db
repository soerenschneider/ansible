#!/bin/sh

set -eu

# define vars
TMP_FILE="/tmp/adblocker.db"
ADSERVERS_FILE={{ adblocker_file }}
UNPRIV_USER={{ adblocker_update_user }}
PROMETHEUS_TEXTFILE_DIR="{{ prometheus_text_dir }}"
METRIC_FILE="$PROMETHEUS_TEXTFILE_DIR/unbound_adblocker.prom"

# start measuring the time
START=$SECONDS

function with_backoff {
  local max_attempts=${ATTEMPTS-10}
  local timeout=${TIMEOUT-1}
  local attempt=0
  local exitCode=0

  while [[ $attempt < $max_attempts ]]
  do
    "$@"
    exitCode=$?

    if [[ $exitCode == 0 ]]
    then
      break
    fi

    echo "Failure! Retrying in $timeout.." 1>&2
    sleep $timeout
    attempt=$(( attempt + 1 ))
    timeout=$(( timeout * 2 ))
  done

  if [[ $exitCode != 0 ]]
  then
    echo "You've failed me for the last time! ($@)" 1>&2
  fi

  return $exitCode
}

fetch_list() {
    set +e
    # run the update command as unprivileged user
    with_backoff /usr/local/bin/curl -sS -L --compressed 'https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts' | awk 'BEGIN { OFS = "" } NF == 2 && $1 == "0.0.0.0" { print "local-zone: \"", $2, "\" redirect"; print "local-data: \"", $2, " A 0.0.0.0\"" }' > $TMP_FILE
    set -e
}

apply_changes() {
    # restart the unbound server to make changes effective, but only if files differ
    CHECKSUM_NEW="$(sha256 $TMP_FILE)"
    if [[ "$CHECKSUM_NEW" != "$CHECKSUM_OLD" && -s $TMP_FILE ]]; then
        doas -u root mv $TMP_FILE $ADSERVERS_FILE
        doas -u root unbound-control reload
    fi
}

print_metrics() {
    # update metrics
    UPDATE_METRIC_NAME="unbound_adblocker_import_timestamp"
    echo "# HELP $UPDATE_METRIC_NAME the timestamp of the last import"
    echo "# TYPE $UPDATE_METRIC_NAME gauge"
    echo "$UPDATE_METRIC_NAME $(date +%s)"

    ENTRIES_CNT_METRIC_NAME="unbound_adblocker_entries_total"
    echo "# HELP $ENTRIES_CNT_METRIC_NAME the number of entries the adblocker list has"
    echo "# TYPE $ENTRIES_CNT_METRIC_NAME gauge"
    echo "$ENTRIES_CNT_METRIC_NAME $(grep 'local-zone:' $ADSERVERS_FILE | wc -l)"

    END=$SECONDS
    DURATION=$((END - START))
    DURATION_METRIC_NAME="unbound_adblocker_import_duration_sec"
    echo "# HELP $DURATION_METRIC_NAME the duration of the last import"
    echo "# TYPE $DURATION_METRIC_NAME gauge"
    echo "$DURATION_METRIC_NAME $DURATION"
}

if [ -f $ADSERVERS_FILE ]; then
    CHECKSUM_OLD="$(sha256 $ADSERVERS_FILE)"
else
    CHECKSUM_OLD=""
fi

fetch_list
apply_changes
print_metrics > ${METRIC_FILE}.tmp
mv ${METRIC_FILE}.tmp ${METRIC_FILE}
