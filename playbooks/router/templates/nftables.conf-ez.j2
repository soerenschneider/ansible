#!/usr/sbin/nft -f

flush ruleset

include "{{ nftables_variables_file }}"

define IPMI_IF = enp3s0
define NET_LOCAL = 192.168.2.0/24 
define SSH_SOURCES = { $NET_PRIVATE, $ROOTSERVERS }

table ip global {
    chain inbound_private {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # allow DHCP, DNS and SSH from the private network
        ip saddr $NET_PRIVATE ip protocol . th dport vmap {
            udp . 53 : accept,
            tcp . 53 : accept,
            udp . 67 : accept,
            udp . 123 : accept
        }

        ip saddr { $LOCAL_PROMETHEUS_SERVER, $GLOBAL_DEVICE_SOEREN, $LOCAL_DEVICE_SOEREN } tcp dport { 8405, 9093, 9100, 9192, 15283 } accept
        ip saddr $SSH_SOURCES tcp dport ssh accept
        ip saddr 192.168.2.0/24 tcp dport {80, 443, 445, 6600 } accept
        udp dport $WIREGUARD_PORT accept
    }

    chain inbound_wg {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

        # allow DHCP, DNS and SSH from the private network
        ip protocol . th dport vmap {
            tcp . 22 : accept,
            udp . 53 : accept,
            tcp . 53 : accept,
            udp . 123 : accept
        }

        ip saddr { $GLOBAL_PROMETHEUS_SERVER, $GLOBAL_DEVICE_SOEREN } tcp dport 9093 accept
        ip saddr 192.168.0.0/16 tcp dport { 9094, 9093 } accept
        ip saddr 192.168.0.0/16 udp dport { 9094 } accept
    }

    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname vmap {
            lo : accept,
            $WG_IF : jump inbound_wg,
            $DEV_PRIVATE : jump inbound_private
        }

        # the rest is dropped by the above policy
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # connections from the internal net to the internet or to other
        # internal nets are allowed
        # route
        iifname $DEV_PRIVATE ip daddr != 192.168.0.0/16 accept
        ip saddr $LOCAL_WIREGUARD_CLIENT iifname $DEV_PRIVATE accept
        ip saddr { $GLOBAL_DEVICE_SOEREN, 192.168.200.200/32, 192.168.64.0/24, 192.168.65.0/24, 192.168.72.0/24, 192.168.73.0/24 } iifname $WG_IF accept
        ip saddr { $LOCAL_DEVICE_SOEREN, $GLOBAL_DEVICE_SOEREN } oifname $IPMI_IF accept
        # allow routers to have a HA nas backend
        ip saddr { 192.168.200.3, 192.168.200.4 } ip daddr 192.168.2.216 tcp dport { 443, 445, 6600 } accept

        ip saddr 192.168.0.0/16 iifname $WG_IF ip daddr { $LOCAL_VAULT_SERVER, $LOCAL_PROMETHEUS_SERVER }   tcp dport { 443, 8200 } accept
        ip saddr $GLOBAL_DEVICE_SOEREN_WORK iifname $WG_IF ip daddr { 192.168.2.229 }                       tcp dport { 80, 443 } accept
        ip saddr $GLOBAL_DEVICE_SOEREN_WORK iifname $WG_IF ip daddr { 192.168.2.0/24 }                      tcp dport 22 accept
        ip saddr $GLOBAL_DEVICE_SOEREN_WORK iifname $WG_IF ip daddr $LOCAL_K8S_MASTER                       tcp dport 6443 accept

        #iifname wg0 ip daddr 192.168.2.0/24 accept
    }

    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        # masquerade private IP addresses
        ip saddr $NET_LOCAL oifname $DEV_PRIVATE masquerade
    }
}
