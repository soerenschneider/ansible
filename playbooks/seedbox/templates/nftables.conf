#!/usr/sbin/nft -f

flush ruleset

define IF_ETH = eth0

define NET_PRIVATE = 192.168.0.0/16

define IF_WG = wg0
define WG_PORT = 12686
define WG_NET = { 192.168.2.0/24, 192.168.64.0/21, 192.168.72.0/21, 192.168.200.0/24 }

table ip filter {
	set denylist {
		type ipv4_addr
		size 65535
		flags dynamic,timeout
		timeout 15m
	}

	chain input {
		type filter hook input priority filter; policy accept;
		iifname $IF_ETH ip protocol tcp ct state new,untracked limit rate over 60/minute update @denylist { ip saddr }
		ip saddr @denylist ip protocol tcp drop #reject with tcp reset
		#ip saddr @denylist tcp dport 1-65336 drop
	}
}

table ip global {
    chain inbound_eth {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request limit rate 5/second accept

	udp dport $WG_PORT accept

        tcp dport 22   accept
        tcp dport 80   accept
        tcp dport 443  accept
        tcp dport 8883 accept
    }

    chain inbound_wg {
        # accepting ping (icmp-echo-request) for diagnostic purposes.
        icmp type echo-request accept

        ip saddr $WG_NET ip protocol . th dport vmap {
		tcp . 22 : accept,
		tcp . 80 : accept,
		tcp . 443 : accept,
		tcp . 8883 : accept,
		tcp . 9000 : accept,
		tcp . 9443 : accept,
	}
    }

    chain inbound {
        type filter hook input priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # allow loopback traffic, anything else jump to chain for further evaluation
        iifname vmap {
		lo : accept,
		$IF_WG : jump inbound_wg,
		$IF_ETH : jump inbound_eth
	}

        # the rest is dropped by the above policy
    }

    chain forward {
        type filter hook forward priority 0; policy drop;

        # Allow traffic from established and related packets, drop invalid
        ct state vmap { established : accept, related : accept, invalid : drop }

        # the rest is dropped by the above policy
    }
}
