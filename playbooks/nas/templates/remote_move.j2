#!/bin/bash

set -e

HOST=${1}
SRC=${2}
DEST=${3}
PROMETHEUS_TEXTDIR=${4:-{{ node_exporter_textfile_dir }}}

LOOT_FOLDER="/var/lib/transmission/complete"

{% if remote_move.bwlimit is defined %}
BWLIMIT={{ remote_move.bwlimit }}
{% else %}
BWLIMIT=0
{% endif %}
METRIC_PREFIX="remote_move"

UNIQUE_NAME="remote_move_${HOST}_$(echo ${SRC} | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')_$(echo ${DEST} | tr -dc '[:alnum:]\n\r' | tr '[:upper:]' '[:lower:]')"
LOGFILE=/tmp/${UNIQUE_NAME}
LOCKFILE="${LOGFILE}.lock"

METRICS=""

FILENAME=""
if [ -d ${PROMETHEUS_TEXTDIR} ]; then
    FILENAME="${PROMETHEUS_TEXTDIR}/${UNIQUE_NAME}.prom"
fi

prepare_logfile() {
    if [ ! -e ${LOGFILE} ]; then
        touch ${LOGFILE}
    fi
    cat /dev/null > ${LOGFILE}
    chmod 600 ${LOGFILE}
}

prom_metrics() {
    local RUNTIME=$(expr $(date +%s) - ${START_DATE})
    METRICS="# TYPE ${METRIC_PREFIX}_runtime_seconds gauge"
    METRICS="${METRICS}\n${METRIC_PREFIX}_runtime_seconds{host=\"${HOST}\",src=\"${SRC}\",dst=\"${DEST}\"} ${RUNTIME}"

    if [ -z "${SIZE_BEFORE}" ]; then
        BYTES_TRANSFERRED=0
    else
        SIZE_NOW="$(du -bs ${DEST} | awk '{print $1}')"
        BYTES_TRANSFERRED=$((${SIZE_NOW} - ${SIZE_BEFORE}))
    fi
    METRICS="${METRICS}\n# TYPE ${METRIC_PREFIX}_transferred_bytes gauge"
    METRICS="${METRICS}\n${METRIC_PREFIX}_transferred_bytes{host=\"${HOST}\",src=\"${SRC}\",dst=\"${DEST}\"} ${BYTES_TRANSFERRED}"
   
    if [ -z "${FILES_CNT_BEFORE}" ]; then
        FILES_TRANSFERRED=0
    else
        FILES_CNT_NOW="$(find ${DEST} -type f | wc -l)"
        FILES_TRANSFERRED=$((${FILES_CNT_NOW} - ${FILES_CNT_BEFORE}))
    fi
    METRICS="${METRICS}\n# TYPE ${METRIC_PREFIX}_files_synced_total gauge"
    METRICS="${METRICS}\n${METRIC_PREFIX}_files_synced_total{host=\"${HOST}\",src=\"${SRC}\",dst=\"${DEST}\"} ${FILES_TRANSFERRED}"
    
    METRICS="${METRICS}\n# TYPE ${METRIC_PREFIX}_timestamp_seconds gauge"
    METRICS="${METRICS}\n${METRIC_PREFIX}_timestamp_seconds{outcome=\"$1\",host=\"${HOST}\",src=\"${SRC}\",dst=\"${DEST}\"} $(date +%s)"
}

fetch_files() {
    START_DATE="$(date +%s)"
    SIZE_BEFORE="$(du -bs ${DEST} | awk '{print $1}')"
    FILES_CNT_BEFORE="$(find ${DEST} -type f | wc -l)"

    if [ ! -d ${DEST} ]; then
        OUTCOME="nonexisten_dest"
        prom_metrics "${OUTCOME}"
        return
    fi

    echo "Running remote lootorganizer" >> "${LOGFILE}"
    set +e
    ssh -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no ${HOST} lootorganizer "${LOOT_FOLDER}" {{ remote_move.src }} >> ${LOGFILE} 2>&1
    if [ $? -ne 0 ]; then
        OUTCOME="lootorganizer_failed"
        prom_metrics "${OUTCOME}"
        return
    fi
    set -e

    # check the amounf of files we need to fetch from the remote
    echo "Checking files to sync..." >> "${LOGFILE}"
    FILES_TO_SYNC=$(ssh -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no ${HOST} find ${SRC}/ -type f 2>> ${LOGFILE} | wc -l)

    if [ $? -ne 0 ]; then
        OUTCOME="ssh_failed"
        prom_metrics "${OUTCOME}"
        return
    fi

    # check whether there's work to do or not (we don't want to wake sleeping dragons, Ã¤h disks)
    if [ ${FILES_TO_SYNC} -gt 0 ]; then
        # fetch all the files, deleting the *files* after succesfull download
        echo "Fetching remote files" >> "${LOGFILE}"
        rsync --bwlimit="${BWLIMIT}" --exclude="*.part" --delete-excluded --remove-source-files -Pr ${HOST}:${SRC}/ ${DEST}/ >> ${LOGFILE} 2>&1
        if [ $? -ne 0 ]; then
            OUTCOME="rsync_failed"
            prom_metrics "${OUTCOME}"
            return
        fi

        # delete all remaining empty dirs
        echo "Deleting remote files" >> "${LOGFILE}"
        ssh -o PasswordAuthentication=no -o ChallengeResponseAuthentication=no ${HOST} find ${SRC}/ -type d -empty -mindepth 1 -delete 2>> ${LOGFILE}
        if [ $? -ne 0 ]; then
            OUTCOME="deletion_failed"
            prom_metrics "${OUTCOME}"
            return
        fi
    fi

    OUTCOME="success"
    prom_metrics "${OUTCOME}"
}

die() {
    echo "$(date "+%Y/%m/%d %H:%M:%S") ${1}"
    exit 1
}

print_json() {
    echo "{\"files_transferred\":${FILES_TRANSFERRED},\"outcome\":\"${OUTCOME}\"}"
}

verify() {
    if [ -z ${HOST} ]; then
        echo "You must submit a host"
        exit 1
    fi

    if [ -z ${SRC} ]; then
        echo "You must submit a src"
        exit 1
    fi

    if [ -z ${DEST} ]; then
        echo "You must submit a destination"
        exit 1
    fi
}

(
    verify
    flock -x -n 200 || die "Could not gain lock on ${LOCKFILE}"

    prepare_logfile
    fetch_files
    # print metrics
    if command -v sponge &> /dev/null; then
        echo -e "${METRICS}" | sponge "${FILENAME}"
    else
        rm -f ${FILENAME}
        echo -e "${METRICS}" > "${FILENAME}"
    fi

    print_json

) 200>${LOCKFILE}
